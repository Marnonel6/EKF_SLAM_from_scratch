<launch>

  <!-- Arguments -->
  <arg name="cmd_src" default="circle"
   description="Specifies which node publishes to the cmd_vel topic - circle, teleop, none"/>
  <arg name="robot" default="nusim"
   description="Where to launch the nodes - robot, simulator, nothing"/>
  <arg name="use_rviz" default="true"
   description="Specify if rviz needs to start - true, false"/>
  <arg name="body_id" default=""
   description="The name of the body frame of the robot"/>
  <arg name="odom_id" default="odom"
   description="The name of the odometry frame"/>
  <arg name="left_wheel_joint" default=""
   description="The name of the left wheel joint"/>
  <arg name="right_wheel_joint" default=""
   description="The name of the right wheel joint"/>

  <!-- Argument to specify configuration file for robot control. -->
  <arg name="config_file1" default="diff_params.yaml" 
   description=".yaml file to configure robot controls"/>

  <!-- Argument to specify configuration file for rviz. -->
  <arg name="rviz_config" default="$(find-pkg-share nuturtle_control)/config/nuturtle_sim.rviz" 
   description=".rviz file to configure the simulator"/>

  <!-- Localhost turtlebot3 node -->
  <node pkg="numsr_turtlebot" exec="numsr_turtlebot" name="numsr_turtlebot"
        if="$(eval '\'$(var robot)\' == \'localhost\'')">
  </node>

  <!-- Circle node -->
  <node pkg="nuturtle_control" exec="circle" name="circle"
        if="$(eval '\'$(var cmd_src)\' == \'circle\'')"/>

  <!-- Teleop keyboard node -->
  <node pkg="teleop_twist_keyboard" exec="teleop_twist_keyboard" name="teleop_twist_keyboard" 
        output='screen' launch-prefix="xterm -e" if="$(eval '\'$(var cmd_src)\' == \'teleop\'')"/>

  <!-- Launch the Nusim simulation launch file -->
  <include file="$(find-pkg-share nusim)/launch/nusim.launch.xml"
           if="$(eval '\'$(var robot)\' == \'nusim\'')">
      <arg name="rviz_config" value="$(var rviz_config)"/>
  </include>

  <!-- Turtle control node if using nusim-->
  <node pkg="nuturtle_control" exec="turtle_control" name="turtle_control"
        if="$(eval '\'$(var robot)\' == \'nusim\'')">
      <param from="$(find-pkg-share nuturtle_description)/config/$(var config_file1)"/>
      <remap from="/wheel_cmd" to="red/wheel_cmd"/>
      <remap from="/sensor_data" to="red/sensor_data"/>
      <remap from="/joint_states" to="blue/joint_states"/>
      <!-- Remap jsp to get wheels to rotate -->
  </node>

  <!-- Turtle control node if using localhost-->
  <node pkg="nuturtle_control" exec="turtle_control" name="turtle_control"
        if="$(eval '\'$(var robot)\' == \'localhost\'')">
      <param from="$(find-pkg-share nuturtle_description)/config/$(var config_file1)"/>
  </node>

  <!-- Odometry node -->
  <node pkg="nuturtle_control" exec="odometry" name="odometry">
      <param from="$(find-pkg-share nuturtle_description)/config/$(var config_file1)"/>
      <param name="body_id" value="$(var body_id)"/>
      <param name="odom_id" value="$(var odom_id)"/>
      <param name="wheel_left" value="$(var left_wheel_joint)"/>
      <param name="wheel_right" value="$(var right_wheel_joint)"/>
      <remap from="/joint_states" to="blue/joint_states"/>
      <!-- Remap jsp to get wheels to rotate -->
  </node>

  <!-- Static transform publisher between nusim/world and odom tf frames -->
  <node pkg="tf2_ros" exec="static_transform_publisher" name="nusim_world_to_odom"
        args="0 0 0 0 0 0 1 /nusim/world /odom"/>

  <!-- Declare the RViz node and load the config file-->
  <node name="rviz2" pkg="rviz2" exec="rviz2"
        args="-d $(find-pkg-share nuturtle_control)/config/nuturtle_control.rviz"
        if="$(eval '\'$(var use_rviz)\' == \'true\' and \'$(var robot)\' != \'localhost\'')"/>

  <!-- Launch the Python launch file with the blue robot -->
  <include file="$(find-pkg-share nuturtle_description)/launch/load_one.launch.py">
    <!-- Pass required arguments to the Python launch file -->
    <arg name="color" value="blue"/>
    <arg name="use_rviz" value="false"/>
    <arg name="use_jsp" value="false"/> 
  </include>

</launch>